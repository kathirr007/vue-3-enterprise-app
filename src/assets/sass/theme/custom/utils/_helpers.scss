@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character== '.') {
      @if $character== '.' {
        $digits: 1;
      } @else if $digits==0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + calc(map-get($numbers, $character) / $digits);
      }
    }
  }

  @return if($minus, -$result, $result);
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

@function floating-class($str) {
  @if (
    ($str== '0.5') or
      ($str== '1.5') or
      ($str== '2.5') or
      ($str== '3.5') or
      ($str== '-0.5') or
      ($str== '-1.5') or
      ($str== '-2.5') or
      ($str== '-3.5')
  ) {
    @return str-replace(#{$str}, '.', '\\.');
  }
  @return $str;
}

.w-1\.5rem {
  width: 1.5rem !important;
}
.h-1\.5rem {
  height: 1.5rem !important;
}
